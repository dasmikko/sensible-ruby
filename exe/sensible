#!/usr/bin/env -S ruby --yjit

SPEC = %(
  @ A small tool to manage and deploy projects/machines

  Install and update systems much like ansible but using shell scripts. It uses
  a sensible.yml configuration file to control the process

  OPTIONS
    -e,env,environment=ENV
      Sets the environment (dev/prod/etc),

    -f,file=CONF:EFILE
      Path to sensible configuration file

    -d,dir,directory=EDIR
      Path to sensible directory. Default '.sensible'

    -v,verbose
      Verbose

    -a=EFILE

  COMMANDS
    check!
      Check the project for missing dependencies

    install!
      Install missing dependencies and requirements
    
    task.list!
      List tasks
    
    task.run! -- TASK
      Run a single task

    task.create! -- TASK
      Create a task

    init!
      Create a new sensible configuration file
)

require_relative '../lib/sensible.rb'
require 'shellopts'
require_relative '../lib/sensible/log'

opts, args = ShellOpts::process(SPEC, ARGV, version_number: Sensible::VERSION)
cmd = opts.subcommand!
#cmd == :task! or args.expect(0) # Ensure no arguments except for task

if opts.verbose
  puts "Options"
  puts "  env: #{opts.env}"
  puts "  file: #{opts.file}"
  puts "  dir: #{opts.dir}"
  puts "  a: #{opts.a}"
  puts "  args: #{args}"
  # puts "Command: #{cmd.to_s.sub(/!$/, "")}"
end

if opts.subcommand == :init!
  Sensible::Sensible.init(opts)
  exit
end 

sensible = Sensible::Sensible.new("sensible.yml", opts, args)
case opts.subcommand
  when :check!
    sensible.check
  when :install!
    sensible.install
  when :task!
    case opts.subcommand!.subcommand
      when nil
        Sensible::Logger::error "Missing subcommand"
      when :list!; sensible.task_list
      when :run!
        arg = args.expect(1) # Expect a single argument to sensible task
        sensible.task_run(arg)
      when :create!
        arg = args.expect(1) # Expect a single argument to sensible task
        sensible.task_create(arg)
    end
  else
    ShellOpts::error "Missing command"
end


